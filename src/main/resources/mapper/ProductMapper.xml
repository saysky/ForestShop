<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.ssm.shop.mapper.ProductMapper">
    <resultMap id="BaseResultMap" type="com.example.ssm.shop.entity.Product">
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="cate_id" property="cateId"/>
        <result column="name" property="name"/>
        <result column="summary" property="summary"/>
        <result column="start_price" property="startPrice"/>
        <result column="current_price" property="currentPrice"/>
        <result column="img_url" property="imgUrl"/>
        <result column="create_time" property="createTime"/>
        <result column="end_time" property="endTime"/>
        <result column="status" property="status"/>
        <association property="user" javaType="com.example.ssm.shop.entity.User">
            <id property="id" column="user_id"/>
            <result property="username" column="username"/>
            <result property="displayName" column="display_name"/>
        </association>
        <association property="order" javaType="com.example.ssm.shop.entity.Order">
            <id property="id" column="order_id"/>
            <result property="status" column="order_status"/>
        </association>
    </resultMap>

    <select id="findById" resultMap="BaseResultMap" parameterType="java.lang.Long">
        SELECT
            id, user_id, cate_id, name, summary, start_price, current_price, img_url, create_time, end_time, status
        FROM
            `product`
        WHERE
            id = #{id}
    </select>

    <delete id="deleteById" parameterType="java.lang.Long">
       DELETE 
       FROM
         `product`
       WHERE
         id = #{id}
    </delete>

    <delete id="deleteByUserId">
         DELETE
        FROM
         `product`
        WHERE
         user_id = #{userId}
    </delete>

    <insert id="insert" parameterType="com.example.ssm.shop.entity.Product" useGeneratedKeys="true" keyProperty="id">
       INSERT INTO `product`
        ( user_id, cate_id, name, summary, start_price, current_price, img_url, create_time, end_time, status )
        VALUES
	    ( #{userId}, #{cateId}, #{name}, #{summary}, #{startPrice}, #{currentPrice}, #{imgUrl}, #{createTime}, #{endTime}, #{status})
    </insert>

    <update id="update" parameterType="com.example.ssm.shop.entity.Product">
        update
        `product`
        <set>
            <if test="userId != null">user_id = #{userId},</if>
            <if test="cateId != null">cate_id = #{cateId},</if>
            <if test="name != null and name != ''">name = #{name},</if>
            <if test="summary != null and summary != ''">summary = #{summary},</if>
            <if test="startPrice != null">start_price = #{startPrice},</if>
            <if test="currentPrice != null">current_price = #{currentPrice},</if>
            <if test="imgUrl != null and imgUrl != ''">img_url = #{imgUrl},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="endTime != null">end_time = #{endTime},</if>
            <if test="status != null">status = #{status},</if>
        </set>
        where id = #{id}
    </update>

    <update id="updateAllStatus">
        UPDATE
            `product`
        SET
            status = 0
        WHERE
            status = 1 AND end_time &lt;= now()
    </update>

    <select id="findAll" parameterType="com.example.ssm.shop.entity.Product" resultMap="BaseResultMap">
        SELECT
        p.id, p.user_id, p.cate_id, p.name, p.summary, p.start_price,
        p.current_price, p.img_url, p.create_time, p.end_time, p.status,
        u.id user_id, u.username username, u.display_name display_name,
        o.id order_id, o.status order_status
        FROM
        `user` u, `product` p
        LEFT JOIN `order` o ON o.product_id = p.id
        <where>
            p.user_id = u.id AND
            <if test="keywords != null and keywords != ''">
                ( p.name LIKE CONCAT('%', #{keywords} ,'%') OR p.summary LIKE CONCAT('%', #{keywords} ,'%') ) AND
            </if>
            <if test="userId != null">
                p.user_id = #{userId} AND
            </if>
            <if test="cateId != null">
                p.cate_id = #{cateId} AND
            </if>
            <if test="status != null">
                p.status = #{status} AND
            </if>
            1 = 1
        </where>
        ORDER BY p.create_time DESC
    </select>


    <select id="findByName" parameterType="String" resultMap="BaseResultMap">
         SELECT
            id, cate_id, user_id, name, summary, start_price, current_price, img_url, create_time, end_time, status
         FROM
            `product`
         WHERE
            name LIKE CONCAT('%', #{value},'%')
    </select>

    <select id="findByUserId" resultMap="BaseResultMap">
         SELECT
            p.id, p.user_id, p.cate_id, p.name, p.summary, p.start_price,
            p.current_price, p.img_url, p.create_time, p.end_time, p.status,
            u.id user_id, u.username username, u.display_name display_name,
            o.id order_id, o.status order_status
        FROM
            `user` u, `product` p
        LEFT JOIN `order` o ON o.product_id = p.id
        WHERE
            p.user_id = #{userId} AND
            p.user_id = u.id

        ORDER BY p.create_time DESC
    </select>

    <select id="findNormalAndOvertimeProductList" resultMap="BaseResultMap">
        SELECT
            id, cate_id, user_id, name, summary, start_price, current_price, img_url, create_time, end_time, status
        FROM
            `product`
        WHERE
            status = 1 AND end_time &lt;= now()
    </select>


